{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":8213645,"sourceType":"datasetVersion","datasetId":4868036}],"dockerImageVersionId":30699,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/eyamethnani/pcd-model?scriptVersionId=175151273\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import pandas as pd\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport math\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport numpy as np\nimport re","metadata":{"execution":{"iopub.status.busy":"2024-05-01T21:31:42.01111Z","iopub.execute_input":"2024-05-01T21:31:42.012035Z","iopub.status.idle":"2024-05-01T21:31:42.01757Z","shell.execute_reply.started":"2024-05-01T21:31:42.012003Z","shell.execute_reply":"2024-05-01T21:31:42.016389Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\n\n# Load the dataset\ndata_path = '/kaggle/input/data-feat-clean/data_new_features_cleaned (1).csv'\ndata = pd.read_csv(data_path)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-05-01T21:31:44.337162Z","iopub.execute_input":"2024-05-01T21:31:44.338039Z","iopub.status.idle":"2024-05-01T21:31:44.422209Z","shell.execute_reply.started":"2024-05-01T21:31:44.338003Z","shell.execute_reply":"2024-05-01T21:31:44.421393Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"!pip install datasets","metadata":{"execution":{"iopub.status.busy":"2024-04-28T14:13:21.427307Z","iopub.execute_input":"2024-04-28T14:13:21.427902Z","iopub.status.idle":"2024-04-28T14:13:34.178374Z","shell.execute_reply.started":"2024-04-28T14:13:21.427873Z","shell.execute_reply":"2024-04-28T14:13:34.177204Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":26,"outputs":[{"name":"stderr","text":"huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n\t- Avoid using `tokenizers` before the fork if possible\n\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n","output_type":"stream"},{"name":"stdout","text":"Requirement already satisfied: datasets in /opt/conda/lib/python3.10/site-packages (2.18.0)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from datasets) (3.13.1)\nRequirement already satisfied: numpy>=1.17 in /opt/conda/lib/python3.10/site-packages (from datasets) (1.26.4)\nRequirement already satisfied: pyarrow>=12.0.0 in /opt/conda/lib/python3.10/site-packages (from datasets) (15.0.2)\nRequirement already satisfied: pyarrow-hotfix in /opt/conda/lib/python3.10/site-packages (from datasets) (0.6)\nRequirement already satisfied: dill<0.3.9,>=0.3.0 in /opt/conda/lib/python3.10/site-packages (from datasets) (0.3.8)\nRequirement already satisfied: pandas in /opt/conda/lib/python3.10/site-packages (from datasets) (2.1.4)\nRequirement already satisfied: requests>=2.19.0 in /opt/conda/lib/python3.10/site-packages (from datasets) (2.31.0)\nRequirement already satisfied: tqdm>=4.62.1 in /opt/conda/lib/python3.10/site-packages (from datasets) (4.66.1)\nRequirement already satisfied: xxhash in /opt/conda/lib/python3.10/site-packages (from datasets) (3.4.1)\nRequirement already satisfied: multiprocess in /opt/conda/lib/python3.10/site-packages (from datasets) (0.70.16)\nRequirement already satisfied: fsspec<=2024.2.0,>=2023.1.0 in /opt/conda/lib/python3.10/site-packages (from fsspec[http]<=2024.2.0,>=2023.1.0->datasets) (2024.2.0)\nRequirement already satisfied: aiohttp in /opt/conda/lib/python3.10/site-packages (from datasets) (3.9.1)\nRequirement already satisfied: huggingface-hub>=0.19.4 in /opt/conda/lib/python3.10/site-packages (from datasets) (0.22.2)\nRequirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from datasets) (21.3)\nRequirement already satisfied: pyyaml>=5.1 in /opt/conda/lib/python3.10/site-packages (from datasets) (6.0.1)\nRequirement already satisfied: attrs>=17.3.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets) (23.2.0)\nRequirement already satisfied: multidict<7.0,>=4.5 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets) (6.0.4)\nRequirement already satisfied: yarl<2.0,>=1.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets) (1.9.3)\nRequirement already satisfied: frozenlist>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets) (1.4.1)\nRequirement already satisfied: aiosignal>=1.1.2 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets) (1.3.1)\nRequirement already satisfied: async-timeout<5.0,>=4.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets) (4.0.3)\nRequirement already satisfied: typing-extensions>=3.7.4.3 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub>=0.19.4->datasets) (4.9.0)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging->datasets) (3.1.1)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->datasets) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->datasets) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->datasets) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests>=2.19.0->datasets) (2024.2.2)\nRequirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas->datasets) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas->datasets) (2023.3.post1)\nRequirement already satisfied: tzdata>=2022.1 in /opt/conda/lib/python3.10/site-packages (from pandas->datasets) (2023.4)\nRequirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.8.2->pandas->datasets) (1.16.0)\n","output_type":"stream"}]},{"cell_type":"code","source":"!pip install virtualenv\n!virtualenv venv\n!source venv/bin/activate\n!pip install package_name\n!pip install accelerate -U\n\n!pip install transformers[torch]\n","metadata":{"execution":{"iopub.status.busy":"2024-04-28T14:13:34.180528Z","iopub.execute_input":"2024-04-28T14:13:34.180881Z","iopub.status.idle":"2024-04-28T14:14:28.094538Z","shell.execute_reply.started":"2024-04-28T14:13:34.180851Z","shell.execute_reply":"2024-04-28T14:14:28.091454Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":27,"outputs":[{"name":"stderr","text":"huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n\t- Avoid using `tokenizers` before the fork if possible\n\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n","output_type":"stream"},{"name":"stdout","text":"Requirement already satisfied: virtualenv in /opt/conda/lib/python3.10/site-packages (20.21.0)\nRequirement already satisfied: distlib<1,>=0.3.6 in /opt/conda/lib/python3.10/site-packages (from virtualenv) (0.3.8)\nRequirement already satisfied: filelock<4,>=3.4.1 in /opt/conda/lib/python3.10/site-packages (from virtualenv) (3.13.1)\nRequirement already satisfied: platformdirs<4,>=2.4 in /opt/conda/lib/python3.10/site-packages (from virtualenv) (3.11.0)\n","output_type":"stream"},{"name":"stderr","text":"huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n\t- Avoid using `tokenizers` before the fork if possible\n\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n","output_type":"stream"},{"name":"stdout","text":"created virtual environment CPython3.10.13.final.0-64 in 294ms\n  creator CPython3Posix(dest=/kaggle/working/venv, clear=False, no_vcs_ignore=False, global=False)\n  seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=/root/.local/share/virtualenv)\n    added seed packages: pip==23.0.1, setuptools==67.4.0, wheel==0.38.4\n  activators BashActivator,CShellActivator,FishActivator,NushellActivator,PowerShellActivator,PythonActivator\n","output_type":"stream"},{"name":"stderr","text":"huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n\t- Avoid using `tokenizers` before the fork if possible\n\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\nhuggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n\t- Avoid using `tokenizers` before the fork if possible\n\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n","output_type":"stream"},{"name":"stdout","text":"Requirement already satisfied: package_name in /opt/conda/lib/python3.10/site-packages (0.1)\n","output_type":"stream"},{"name":"stderr","text":"huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n\t- Avoid using `tokenizers` before the fork if possible\n\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n","output_type":"stream"},{"name":"stdout","text":"Requirement already satisfied: accelerate in /opt/conda/lib/python3.10/site-packages (0.29.3)\nRequirement already satisfied: numpy>=1.17 in /opt/conda/lib/python3.10/site-packages (from accelerate) (1.26.4)\nRequirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from accelerate) (21.3)\nRequirement already satisfied: psutil in /opt/conda/lib/python3.10/site-packages (from accelerate) (5.9.3)\nRequirement already satisfied: pyyaml in /opt/conda/lib/python3.10/site-packages (from accelerate) (6.0.1)\nRequirement already satisfied: torch>=1.10.0 in /opt/conda/lib/python3.10/site-packages (from accelerate) (2.1.2)\nRequirement already satisfied: huggingface-hub in /opt/conda/lib/python3.10/site-packages (from accelerate) (0.22.2)\nRequirement already satisfied: safetensors>=0.3.1 in /opt/conda/lib/python3.10/site-packages (from accelerate) (0.4.3)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging>=20.0->accelerate) (3.1.1)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from torch>=1.10.0->accelerate) (3.13.1)\nRequirement already satisfied: typing-extensions in /opt/conda/lib/python3.10/site-packages (from torch>=1.10.0->accelerate) (4.9.0)\nRequirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch>=1.10.0->accelerate) (1.12)\nRequirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch>=1.10.0->accelerate) (3.2.1)\nRequirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch>=1.10.0->accelerate) (3.1.2)\nRequirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch>=1.10.0->accelerate) (2024.2.0)\nRequirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from huggingface-hub->accelerate) (2.31.0)\nRequirement already satisfied: tqdm>=4.42.1 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub->accelerate) (4.66.1)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch>=1.10.0->accelerate) (2.1.3)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface-hub->accelerate) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface-hub->accelerate) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface-hub->accelerate) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface-hub->accelerate) (2024.2.2)\nRequirement already satisfied: mpmath>=0.19 in /opt/conda/lib/python3.10/site-packages (from sympy->torch>=1.10.0->accelerate) (1.3.0)\n","output_type":"stream"},{"name":"stderr","text":"huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n\t- Avoid using `tokenizers` before the fork if possible\n\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n","output_type":"stream"},{"name":"stdout","text":"Requirement already satisfied: transformers[torch] in /opt/conda/lib/python3.10/site-packages (4.39.3)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from transformers[torch]) (3.13.1)\nRequirement already satisfied: huggingface-hub<1.0,>=0.19.3 in /opt/conda/lib/python3.10/site-packages (from transformers[torch]) (0.22.2)\nRequirement already satisfied: numpy>=1.17 in /opt/conda/lib/python3.10/site-packages (from transformers[torch]) (1.26.4)\nRequirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from transformers[torch]) (21.3)\nRequirement already satisfied: pyyaml>=5.1 in /opt/conda/lib/python3.10/site-packages (from transformers[torch]) (6.0.1)\nRequirement already satisfied: regex!=2019.12.17 in /opt/conda/lib/python3.10/site-packages (from transformers[torch]) (2023.12.25)\nRequirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from transformers[torch]) (2.31.0)\nRequirement already satisfied: tokenizers<0.19,>=0.14 in /opt/conda/lib/python3.10/site-packages (from transformers[torch]) (0.15.2)\nRequirement already satisfied: safetensors>=0.4.1 in /opt/conda/lib/python3.10/site-packages (from transformers[torch]) (0.4.3)\nRequirement already satisfied: tqdm>=4.27 in /opt/conda/lib/python3.10/site-packages (from transformers[torch]) (4.66.1)\nRequirement already satisfied: torch in /opt/conda/lib/python3.10/site-packages (from transformers[torch]) (2.1.2)\nRequirement already satisfied: accelerate>=0.21.0 in /opt/conda/lib/python3.10/site-packages (from transformers[torch]) (0.29.3)\nRequirement already satisfied: psutil in /opt/conda/lib/python3.10/site-packages (from accelerate>=0.21.0->transformers[torch]) (5.9.3)\nRequirement already satisfied: fsspec>=2023.5.0 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub<1.0,>=0.19.3->transformers[torch]) (2024.2.0)\nRequirement already satisfied: typing-extensions>=3.7.4.3 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub<1.0,>=0.19.3->transformers[torch]) (4.9.0)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging>=20.0->transformers[torch]) (3.1.1)\nRequirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch->transformers[torch]) (1.12)\nRequirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch->transformers[torch]) (3.2.1)\nRequirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch->transformers[torch]) (3.1.2)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests->transformers[torch]) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests->transformers[torch]) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests->transformers[torch]) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests->transformers[torch]) (2024.2.2)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch->transformers[torch]) (2.1.3)\nRequirement already satisfied: mpmath>=0.19 in /opt/conda/lib/python3.10/site-packages (from sympy->torch->transformers[torch]) (1.3.0)\n","output_type":"stream"}]},{"cell_type":"code","source":"import torch\nimport pandas as pd\nfrom transformers import AutoTokenizer, AutoModelForSequenceClassification, TrainingArguments, Trainer\nfrom datasets import load_dataset, Dataset\n\n\ndef is_about_animal_disease(text, state):\n    if state == 'yes event':\n        return True\n    else:\n        return False\n\n# Use apply with a lambda function to create the 'labels' column based on the 'is_about_animal_disease' function\ndata['labels'] = data.apply(lambda row: is_about_animal_disease(row['TEXT_filtered'], row['STATE']), axis=1).astype(int)\n\nfrom sklearn.model_selection import train_test_split\n\n\n# Split the DataFrame into training and evaluation sets\ntrain_df, eval_df = train_test_split(data, test_size=0.2, random_state=42)\n\n# Convert the DataFrame into datasets.Dataset format\ntrain_dataset = Dataset.from_pandas(train_df)\neval_dataset = Dataset.from_pandas(eval_df)\n\n\n# Initialize tokenizer and model\nmodel_name = \"bert-base-multilingual-cased\"\ntokenizer = AutoTokenizer.from_pretrained(model_name)\nmodel = AutoModelForSequenceClassification.from_pretrained(model_name, num_labels=2)\n\n# Tokenize the dataset and include labels\ndef tokenize_function(examples):\n    # Tokenize the text\n    tokenized_text = tokenizer(\n        examples[\"TEXT_filtered\"],\n        padding='max_length',\n        truncation=True,\n        max_length=512,\n        return_tensors=\"pt\"\n    )\n\n    # Include the labels in the returned dictionary\n    return {\n        \"input_ids\": tokenized_text[\"input_ids\"].squeeze(),\n        \"attention_mask\": tokenized_text[\"attention_mask\"].squeeze(),\n        \"labels\": examples[\"labels\"]\n    }\n\ntokenized_datasets = train_dataset.map(tokenize_function, batched=True)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-04-28T17:08:23.519395Z","iopub.execute_input":"2024-04-28T17:08:23.520133Z","iopub.status.idle":"2024-04-28T17:08:42.857755Z","shell.execute_reply.started":"2024-04-28T17:08:23.520101Z","shell.execute_reply":"2024-04-28T17:08:42.856846Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":4,"outputs":[{"name":"stderr","text":"2024-04-28 17:08:28.731752: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-04-28 17:08:28.731856: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-04-28 17:08:28.866274: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/49.0 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"311e0e2e5c384bdfbc6c17b089a5b492"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/625 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"665c89058a0e4b0da6b43850bcaa0e6f"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"vocab.txt:   0%|          | 0.00/996k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e8a12daeefe84cb2aadbd5d47a313d8d"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.json:   0%|          | 0.00/1.96M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"83b7253fdabf45c2b565abc87aca6611"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"model.safetensors:   0%|          | 0.00/714M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"aafdbcefe6f348728ebe7e690a91f0e8"}},"metadata":{}},{"name":"stderr","text":"Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-multilingual-cased and are newly initialized: ['classifier.bias', 'classifier.weight']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/464 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"5bdb6336cac24d67a675079328a59224"}},"metadata":{}}]},{"cell_type":"code","source":"# Define training arguments\ntraining_args = TrainingArguments(\n    output_dir=\"/content/drive/MyDrive/web scraping/PCD/output directory\",\n    per_device_train_batch_size=4,\n    num_train_epochs=10,\n    logging_dir=\"/content/drive/MyDrive/web scraping/PCD/logging\",\n)\n\n# Initialize Trainer\ntrainer = Trainer(\n    model=model,\n    args=training_args,\n    train_dataset=tokenized_datasets,\n    tokenizer=tokenizer,\n)\n\n# Train the model\ntrainer.train()\n","metadata":{"execution":{"iopub.status.busy":"2024-04-28T17:08:47.144569Z","iopub.execute_input":"2024-04-28T17:08:47.145723Z","iopub.status.idle":"2024-04-28T17:14:11.925572Z","shell.execute_reply.started":"2024-04-28T17:08:47.145679Z","shell.execute_reply":"2024-04-28T17:14:11.924698Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":5,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/accelerate/accelerator.py:436: FutureWarning:\n\nPassing the following arguments to `Accelerator` is deprecated and will be removed in version 1.0 of Accelerate: dict_keys(['dispatch_batches', 'split_batches', 'even_batches', 'use_seedable_sampler']). Please pass an `accelerate.DataLoaderConfiguration` instead: \ndataloader_config = DataLoaderConfiguration(dispatch_batches=None, split_batches=False, even_batches=True, use_seedable_sampler=True)\n\n\u001b[34m\u001b[1mwandb\u001b[0m: Logging into wandb.ai. (Learn how to deploy a W&B server locally: https://wandb.me/wandb-server)\n\u001b[34m\u001b[1mwandb\u001b[0m: You can find your API key in your browser here: https://wandb.ai/authorize\n\u001b[34m\u001b[1mwandb\u001b[0m: Paste an API key from your profile and hit enter, or press ctrl+c to quit:","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"  ········································\n"},{"name":"stderr","text":"\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Tracking run with wandb version 0.16.6"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Run data is saved locally in <code>/kaggle/working/wandb/run-20240428_170901-tu34yulq</code>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Syncing run <strong><a href='https://wandb.ai/methnanieya14/huggingface/runs/tu34yulq' target=\"_blank\">genial-forest-7</a></strong> to <a href='https://wandb.ai/methnanieya14/huggingface' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":" View project at <a href='https://wandb.ai/methnanieya14/huggingface' target=\"_blank\">https://wandb.ai/methnanieya14/huggingface</a>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":" View run at <a href='https://wandb.ai/methnanieya14/huggingface/runs/tu34yulq' target=\"_blank\">https://wandb.ai/methnanieya14/huggingface/runs/tu34yulq</a>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='1160' max='1160' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [1160/1160 04:52, Epoch 10/10]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Step</th>\n      <th>Training Loss</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>500</td>\n      <td>0.304300</td>\n    </tr>\n    <tr>\n      <td>1000</td>\n      <td>0.030500</td>\n    </tr>\n  </tbody>\n</table><p>"},"metadata":{}},{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"TrainOutput(global_step=1160, training_loss=0.1475330256182572, metrics={'train_runtime': 323.4421, 'train_samples_per_second': 14.346, 'train_steps_per_second': 3.586, 'total_flos': 1220835296870400.0, 'train_loss': 0.1475330256182572, 'epoch': 10.0})"},"metadata":{}}]},{"cell_type":"code","source":"# Tokenize and preprocess the evaluation dataset\ntokenized_eval_dataset = eval_dataset.map(tokenize_function, batched=True)\n\n# Evaluate the model\neval_results = trainer.evaluate(eval_dataset=tokenized_eval_dataset)\nprint(eval_results)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-28T17:15:47.124158Z","iopub.execute_input":"2024-04-28T17:15:47.124864Z","iopub.status.idle":"2024-04-28T17:15:49.378988Z","shell.execute_reply.started":"2024-04-28T17:15:47.124832Z","shell.execute_reply":"2024-04-28T17:15:49.378056Z"},"trusted":true},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/117 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"cfdd27f454c54d0eb5c9cead01eaea49"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":""},"metadata":{}},{"name":"stdout","text":"{'eval_loss': 0.11063043773174286, 'eval_runtime': 2.0928, 'eval_samples_per_second': 55.905, 'eval_steps_per_second': 7.167, 'epoch': 10.0}\n","output_type":"stream"}]},{"cell_type":"code","source":"# Evaluate the model\neval_predictions = trainer.predict(tokenized_eval_dataset)\n\n# Extract predicted labels and true labels\npredicted_labels = eval_predictions.predictions.argmax(axis=1)\ntrue_labels = tokenized_eval_dataset['labels']\n\n","metadata":{"execution":{"iopub.status.busy":"2024-04-28T17:15:51.256252Z","iopub.execute_input":"2024-04-28T17:15:51.256599Z","iopub.status.idle":"2024-04-28T17:15:53.399598Z","shell.execute_reply.started":"2024-04-28T17:15:51.256571Z","shell.execute_reply":"2024-04-28T17:15:53.398663Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"\n# Assuming eval_df is your evaluation DataFrame\n# Create a new DataFrame to store predictions, true labels, and text\nresults_df = pd.DataFrame({\n    'Text': eval_df['TEXT'],  # Assuming 'TEXT' is the column containing the text data\n    'True_Labels': true_labels,\n    'Predicted_Labels': predicted_labels\n})\n\n# Display the DataFrame\nprint(results_df)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-28T17:32:30.446111Z","iopub.execute_input":"2024-04-28T17:32:30.446808Z","iopub.status.idle":"2024-04-28T17:32:30.461251Z","shell.execute_reply.started":"2024-04-28T17:32:30.446774Z","shell.execute_reply":"2024-04-28T17:32:30.460046Z"},"trusted":true},"execution_count":30,"outputs":[{"name":"stdout","text":"                                                  Text  True_Labels  \\\n576  first human case of west nile virus detected i...            1   \n278  confirmed outbreak of anthrax case in nigeriay...            1   \n104  extremely rare mosquitoborne virus found in al...            1   \n445  biological and toxin weapons are either microo...            0   \n432  washington horse positive for strangles a hors...            1   \n..                                                 ...          ...   \n301  seasonal influenza is an acute respiratory inf...            0   \n543  florida suwannee county horse is 11th eastern ...            1   \n298  around the age of 6 months an infants need for...            0   \n250  إنفلونزا الطيور تنتقل إلى قطط وسلطات كوريا الج...            1   \n77   proper infant nutrition is fundamental to a ch...            0   \n\n     Predicted_Labels  \n576                 1  \n278                 1  \n104                 1  \n445                 0  \n432                 1  \n..                ...  \n301                 0  \n543                 1  \n298                 0  \n250                 1  \n77                  0  \n\n[117 rows x 3 columns]\n","output_type":"stream"}]},{"cell_type":"code","source":"import numpy as np\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\n\n# Tokenize and preprocess the evaluation dataset\ntokenized_eval_dataset = eval_dataset.map(tokenize_function, batched=True)\n\n# Get the predictions\n# Get the predictions\neval_predictions = trainer.predict(tokenized_eval_dataset)\npredicted_labels = np.argmax(eval_predictions.predictions, axis=1)\ntrue_labels = tokenized_eval_dataset['labels']\n\n\n# Calculate confusion matrix\nconf_matrix = confusion_matrix(true_labels, predicted_labels)\n\n# Plot confusion matrix\nplt.figure(figsize=(8, 6))\nsns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['Non-event', 'Event'], yticklabels=['Non-event', 'Event'])\nplt.xlabel('Predicted Labels')\nplt.ylabel('True Labels')\nplt.title('Confusion Matrix')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-04-28T14:20:58.81966Z","iopub.execute_input":"2024-04-28T14:20:58.820378Z","iopub.status.idle":"2024-04-28T14:21:01.419234Z","shell.execute_reply.started":"2024-04-28T14:20:58.820347Z","shell.execute_reply":"2024-04-28T14:21:01.417395Z"},"trusted":true},"execution_count":34,"outputs":[{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/117 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d5eea574b8554a95b8ee870073c537b0"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":""},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score\n\n# Calculate the accuracy\naccuracy = accuracy_score(true_labels, predicted_labels)\nprint(\"Accuracy:\", accuracy)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-28T14:21:10.190069Z","iopub.execute_input":"2024-04-28T14:21:10.191009Z","iopub.status.idle":"2024-04-28T14:21:10.199992Z","shell.execute_reply.started":"2024-04-28T14:21:10.190962Z","shell.execute_reply":"2024-04-28T14:21:10.198661Z"},"trusted":true},"execution_count":35,"outputs":[{"name":"stdout","text":"Accuracy: 0.9658119658119658\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.metrics import classification_report, accuracy_score\n","metadata":{"execution":{"iopub.status.busy":"2024-04-28T14:21:14.48503Z","iopub.execute_input":"2024-04-28T14:21:14.485407Z","iopub.status.idle":"2024-04-28T14:21:14.491767Z","shell.execute_reply.started":"2024-04-28T14:21:14.485375Z","shell.execute_reply":"2024-04-28T14:21:14.490445Z"},"trusted":true},"execution_count":36,"outputs":[]},{"cell_type":"code","source":"print(classification_report(true_labels, predicted_labels))\n","metadata":{"execution":{"iopub.status.busy":"2024-04-28T14:21:16.294937Z","iopub.execute_input":"2024-04-28T14:21:16.295732Z","iopub.status.idle":"2024-04-28T14:21:16.316821Z","shell.execute_reply.started":"2024-04-28T14:21:16.295699Z","shell.execute_reply":"2024-04-28T14:21:16.313641Z"},"trusted":true},"execution_count":37,"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n           0       1.00      0.95      0.97        74\n           1       0.91      1.00      0.96        43\n\n    accuracy                           0.97       117\n   macro avg       0.96      0.97      0.96       117\nweighted avg       0.97      0.97      0.97       117\n\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# custom bert with new features\n","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport torch\nfrom torch import nn\nfrom transformers import BertTokenizer, BertModel, Trainer, TrainingArguments\nfrom datasets import Dataset, load_dataset\nfrom sklearn.model_selection import train_test_split\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\n","metadata":{"execution":{"iopub.status.busy":"2024-05-01T21:33:06.937126Z","iopub.execute_input":"2024-05-01T21:33:06.938246Z","iopub.status.idle":"2024-05-01T21:33:22.716698Z","shell.execute_reply.started":"2024-05-01T21:33:06.938202Z","shell.execute_reply":"2024-05-01T21:33:22.715724Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":4,"outputs":[{"name":"stderr","text":"2024-05-01 21:33:13.885449: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-05-01 21:33:13.885552: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-05-01 21:33:14.011137: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nimport numpy as np\nimport torch\nfrom torch.utils.data import Dataset, DataLoader\nfrom transformers import AutoTokenizer, AutoModel\nfrom sklearn.preprocessing import StandardScaler\nimport ast\n\n# Normalize numerical features\nscaler = StandardScaler()\nnumerical_features = scaler.fit_transform(data[['char_count', 'word_count', 'avg_word_length', 'polarity', 'subjectivity']])\n\n\n# Convert string representation of dictionaries to actual dictionaries\ndata['POS_counts'] = data['POS_counts'].apply(lambda x: ast.literal_eval(x) if isinstance(x, str) else x)\n\n# Now let's redefine the function to encode POS counts\ndef encode_pos_counts(pos_counts):\n    pos_columns = sorted(list(set(key for dic in data['POS_counts'] for key in dic.keys())))\n    return [pos_counts.get(col, 0) for col in pos_columns]\n\n# Apply the function to the POS_counts column\npos_features = np.array(data['POS_counts'].apply(encode_pos_counts).tolist())\n\n\n\n\n\n# Tokenize text data\ntokenizer = AutoTokenizer.from_pretrained(\"bert-base-multilingual-cased\")\ntokenized_data = tokenizer(data['TEXT_filtered'].tolist(), padding=True, truncation=True, max_length=512, return_tensors=\"pt\")\n\n# Split the dataset\ntrain_indices, test_indices = train_test_split(range(len(data)), test_size=0.2, random_state=42)\n\n# Train data\ntrain_tokenized = {key: val[train_indices] for key, val in tokenized_data.items()}\ntrain_numerical_features = torch.tensor(numerical_features[train_indices], dtype=torch.float32)\ntrain_pos_features = torch.tensor(pos_features[train_indices], dtype=torch.float32)\ntrain_labels = torch.tensor(data.loc[train_indices, 'STATE_encoded'].values, dtype=torch.long)\n\n# Test data\ntest_tokenized = {key: val[test_indices] for key, val in tokenized_data.items()}\ntest_numerical_features = torch.tensor(numerical_features[test_indices], dtype=torch.float32)\ntest_pos_features = torch.tensor(pos_features[test_indices], dtype=torch.float32)\ntest_labels = torch.tensor(data.loc[test_indices, 'STATE_encoded'].values, dtype=torch.long)\n\n# Combine additional features\ntrain_additional_features = torch.cat((train_numerical_features, train_pos_features), dim=1)\ntest_additional_features = torch.cat((test_numerical_features, test_pos_features), dim=1)\n\n# Creating the datasets\nclass TextDataset(Dataset):\n    def __init__(self, input_ids, attention_mask, additional_features, labels):\n        self.input_ids = input_ids\n        self.attention_mask = attention_mask\n        self.additional_features = additional_features\n        self.labels = labels\n\n    def __len__(self):\n        return len(self.labels)\n\n    def __getitem__(self, idx):\n        return {\n            'input_ids': self.input_ids[idx],\n            'attention_mask': self.attention_mask[idx],\n            'additional_features': self.additional_features[idx],\n            'labels': self.labels[idx]\n        }\n\ntrain_dataset = TextDataset(train_tokenized['input_ids'], train_tokenized['attention_mask'], train_additional_features, train_labels)\ntest_dataset = TextDataset(test_tokenized['input_ids'], test_tokenized['attention_mask'], test_additional_features, test_labels)\n\ntrain_loader = DataLoader(train_dataset, batch_size=8, shuffle=True)  # Reduced from 16 to 8\ntest_loader = DataLoader(test_dataset, batch_size=8, shuffle=False)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-01T21:33:31.94236Z","iopub.execute_input":"2024-05-01T21:33:31.943235Z","iopub.status.idle":"2024-05-01T21:33:33.121351Z","shell.execute_reply.started":"2024-05-01T21:33:31.943202Z","shell.execute_reply":"2024-05-01T21:33:33.120308Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"from torch import nn\nfrom transformers import AutoModel\n\nclass CustomBERTModel(nn.Module):\n    def __init__(self):\n        super(CustomBERTModel, self).__init__()\n        self.bert = AutoModel.from_pretrained(\"bert-base-multilingual-cased\")\n        self.classifier = nn.Sequential(\n            nn.Linear(self.bert.config.hidden_size + len(numerical_features[0]) + len(pos_features[0]), 512),\n            nn.ReLU(),\n            nn.Linear(512, 2)  # Assuming binary classification\n        )\n    \n    def forward(self, input_ids, attention_mask, additional_features):\n        outputs = self.bert(input_ids, attention_mask=attention_mask)\n        pooled_output = outputs.pooler_output\n        combined_features = torch.cat((pooled_output, additional_features), dim=1)\n        return self.classifier(combined_features)  # This is where logits are directly returned\n\n\n# Initialize model\nmodel = CustomBERTModel()\n\n# Training and evaluation code here (you can use a similar setup with Trainer or a custom training loop)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-05-01T21:33:46.742038Z","iopub.execute_input":"2024-05-01T21:33:46.742935Z","iopub.status.idle":"2024-05-01T21:33:49.65827Z","shell.execute_reply.started":"2024-05-01T21:33:46.742903Z","shell.execute_reply":"2024-05-01T21:33:49.657304Z"},"trusted":true},"execution_count":7,"outputs":[{"output_type":"display_data","data":{"text/plain":"model.safetensors:   0%|          | 0.00/714M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"1fb7c4d974a645e4b189c6690d90f951"}},"metadata":{}}]},{"cell_type":"code","source":"from torch.optim import AdamW\nfrom torch.nn import CrossEntropyLoss\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nmodel = CustomBERTModel().to(device)\noptimizer = AdamW(model.parameters(), lr=5e-5)\nloss_fn = CrossEntropyLoss()\n\n# Training function\ndef train(model, loader, accumulation_steps=4):\n    model.train()\n    total_loss = 0\n    optimizer.zero_grad()  # Move zero_grad() outside the inner loop\n\n    for i, batch in enumerate(loader):\n        input_ids = batch['input_ids'].to(device)\n        attention_mask = batch['attention_mask'].to(device)\n        additional_features = batch['additional_features'].to(device)\n        labels = batch['labels'].to(device)\n\n        outputs = model(input_ids, attention_mask, additional_features)\n        loss = loss_fn(outputs, labels) / accumulation_steps  # Normalize our loss (if averaged)\n        loss.backward()\n        \n        if (i + 1) % accumulation_steps == 0:\n            optimizer.step()\n            optimizer.zero_grad()\n\n        total_loss += loss.item() * accumulation_steps  # Undo the normalization\n\n    return total_loss / len(loader)\n\n\n# Run training\nfor epoch in range(3):  # Adjust epochs based on model performance and dataset size\n    train_loss = train(model, train_loader)\n    print(f\"Epoch {epoch + 1}, Loss: {train_loss:.4f}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-05-01T21:33:52.619826Z","iopub.execute_input":"2024-05-01T21:33:52.620191Z","iopub.status.idle":"2024-05-01T21:35:06.104888Z","shell.execute_reply.started":"2024-05-01T21:33:52.620162Z","shell.execute_reply":"2024-05-01T21:35:06.103867Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"Epoch 1, Loss: 0.5221\nEpoch 2, Loss: 0.2040\nEpoch 3, Loss: 0.1565\n","output_type":"stream"}]},{"cell_type":"code","source":"# Print dimensions to understand the current setup\nprint(\"Pooled output size:\", model.bert.pooler.dense.out_features)  # Typically 768 for BERT base\nprint(\"Additional features size:\", additional_features.shape[1])\n\n# Calculate expected input size to the classifier\nexpected_input_size = model.bert.pooler.dense.out_features + additional_features.shape[1]\nprint(\"Expected classifier input size:\", expected_input_size)\n\n# Compare this with your classifier's input dimension\nprint(\"Current classifier input size:\", model.classifier[0].in_features)  # Adjust indexing if your setup differs\n","metadata":{"execution":{"iopub.status.busy":"2024-04-28T14:42:40.716253Z","iopub.execute_input":"2024-04-28T14:42:40.717069Z","iopub.status.idle":"2024-04-28T14:42:40.726848Z","shell.execute_reply.started":"2024-04-28T14:42:40.717035Z","shell.execute_reply":"2024-04-28T14:42:40.725592Z"},"trusted":true},"execution_count":50,"outputs":[{"name":"stdout","text":"Pooled output size: 768\nAdditional features size: 8\nExpected classifier input size: 776\nCurrent classifier input size: 791\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.metrics import classification_report\n\ndef evaluate(model, loader):\n    model.eval()\n    all_predictions = []\n    all_labels = []\n    with torch.no_grad():\n        for batch in loader:\n            input_ids = batch['input_ids'].to(device)\n            attention_mask = batch['attention_mask'].to(device)\n            additional_features = batch['additional_features'].to(device)\n            labels = batch['labels'].to(device)\n\n            outputs = model(input_ids, attention_mask, additional_features)\n            predictions = outputs.argmax(dim=1)\n            all_predictions.extend(predictions.cpu().numpy())  # Collect predictions\n            all_labels.extend(labels.cpu().numpy())  # Collect labels\n\n    return all_predictions, all_labels\n","metadata":{"execution":{"iopub.status.busy":"2024-05-01T21:35:27.500384Z","iopub.execute_input":"2024-05-01T21:35:27.500737Z","iopub.status.idle":"2024-05-01T21:35:27.508233Z","shell.execute_reply.started":"2024-05-01T21:35:27.500711Z","shell.execute_reply":"2024-05-01T21:35:27.507133Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"# Assuming you have already defined and trained your model, and have the test_loader ready\nall_predictions, all_labels = evaluate(model, test_loader)\n\n# Print classification report\nprint(classification_report(all_labels, all_predictions, target_names=['Class1', 'Class2']))  # Adjust class names as necessary\n","metadata":{"execution":{"iopub.status.busy":"2024-05-01T21:35:32.47689Z","iopub.execute_input":"2024-05-01T21:35:32.47724Z","iopub.status.idle":"2024-05-01T21:35:34.460554Z","shell.execute_reply.started":"2024-05-01T21:35:32.477212Z","shell.execute_reply":"2024-05-01T21:35:34.459548Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n      Class1       0.97      0.97      0.97        74\n      Class2       0.95      0.95      0.95        43\n\n    accuracy                           0.97       117\n   macro avg       0.96      0.96      0.96       117\nweighted avg       0.97      0.97      0.97       117\n\n","output_type":"stream"}]}]}